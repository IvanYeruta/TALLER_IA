# -*- coding: utf-8 -*-
"""taller.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GEGz7cfHgEtkJ-U3R6zgcM3jSf6tCB9p
"""

#Matias Recalde, Ricardo Zorrilla, Ivan Yeruta

import pandas as pd
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
from sklearn.preprocessing import PolynomialFeatures


# Cargar los datos del archivo Excel, se modificó el excel, sujeto a modificaciones con las nuevas indicaciones del Profe Stalder
ruta='/content/drive/MyDrive/IAA/Datos modificados_subestacion.xlsx'
data = pd.read_excel(ruta)
# Dado que modificamos el archivo descargado.
# procedemos con las siguientes modificaciones
# Convertir la columna 'Fecha' y 'Tiempo' al formato datetime antes de concatenarlas
# Convertir la columna 'Fecha' a tipo datetime
# Elimina las filas con NaN en la columna 'consumption'
data = data.dropna(subset=['consumption'])

# Crear una nueva columna 'Tiempo_str' convirtiendo los objetos datetime.time a formato string
data['Tiempo_str'] = data['Tiempo'].apply(lambda x: x.strftime('%H:%M:%S'))
# Combinar las columnas 'Fecha' y 'Tiempo_str' en una nueva columna 'datetime'
data['datetime'] = pd.to_datetime(data['Fecha'].astype(str) + ' ' + data['Tiempo_str'])


# Extraer el año, mes, día y hora del día como características
data['year'] = data['datetime'].dt.year
data['month'] = data['datetime'].dt.month
data['day'] = data['datetime'].dt.day
data['hour'] = data['datetime'].dt.hour



# Ahora puedes continuar con tu análisis o modelado de datos utilizando las columnas corregidas
# Dividir los datos en características (X) y etiquetas (y)
X = data[['year', 'month', 'day', 'hour']]
y = data['consumption']
# Asumir que X e y son DataFrames o Series de pandas
# Crear nuevas características polinomiales de grado 2

# Entrenar un modelo de regresión lineal
model = LinearRegression()#linea de codigo de ejemplo del profe
model.fit(X, y)
# Crear nuevas características polinomiales de grado 2
poly = PolynomialFeatures(degree=2)#linea de codigo prueba polinomial
X_poly = poly.fit_transform(X)
'''
Breve explicación de la linea de codigo
Por lo tanto, al establecer degree=2, estás indicando que deseas generar
características polinomiales de grado 2 a partir de las características originales.
Esto podría permitir al modelo capturar relaciones no lineales entre las
características originales y la variable objetivo.
'''
# Prueba del modelo de regresión polinomial de grado 2
model_poly = LinearRegression()
model_poly.fit(X_poly, y)

# Crear datos para los próximos años
# trabajando con pandas se utiliza la libreria pd.Dateoffset() que utiñizaremos para sumar o restar fechas
start_date = data['datetime'].max() + pd.DateOffset(minutes=15)  # Obtener la última fecha en los datos y sumar una hora
end_date = start_date + pd.DateOffset(years=1)  # Sumar 3 años a la última fecha en los datos
# se puede cambiar a horas, dias meses en pd.DateOffset(.....) y prediccion de los años en years=....
future_data = pd.DataFrame(pd.date_range(start=start_date, end=end_date, freq='15T'), columns=['datetime'])
future_data['year'] = future_data['datetime'].dt.year
future_data['month'] = future_data['datetime'].dt.month
future_data['day'] = future_data['datetime'].dt.day
future_data['hour'] = future_data['datetime'].dt.hour

# Realizar la predicción para los próximos años
future_predictions = model.predict(future_data[['year', 'month', 'day', 'hour']])

# Crear características polinomiales para los datos futuros
future_data_poly = poly.transform(future_data[['year', 'month', 'day', 'hour']])
# Realizar la predicción para los próximos 5 años
future_predictions_poly = model_poly.predict(future_data_poly)

# Visualizar los resultados en una gráfica
plt.figure(figsize=(12, 6))
plt.plot(future_data['datetime'], future_predictions, label='Predicción de demanda de energía para los próximos años')
plt.plot(future_data['datetime'], future_predictions_poly, label='Predicción de demanda de energía para los próximo año (regresión polinomial)')
plt.xlabel('Fecha')
plt.ylabel('Demanda de energía')
plt.title('Predicción de demanda de energía para los próximo año')
plt.legend()
plt.grid(True)
plt.show()